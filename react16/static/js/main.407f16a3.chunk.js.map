{"version":3,"sources":["../webpack/universalModuleDefinition","components/LibVersion.js","components/HelloModal.js","pages/Home.js","App.js","serviceWorker.js","index.js","public-path.js"],"names":["root","factory","exports","module","define","amd","window","React","createElement","Fragment","className","reactVersion","antdVersion","visible","setVisible","useState","Button","onClick","Modal","onOk","onCancel","title","style","borderColor","About","lazy","RouteExample","Router","basename","__POWERED_BY_QIANKUN__","Link","to","Divider","type","Suspense","fallback","Switch","Route","path","exact","component","Home","App","LibVersion","HelloModal","Boolean","location","hostname","match","render","props","container","ReactDOM","querySelector","document","async","bootstrap","console","log","mount","onGlobalStateChange","value","prev","concat","name","setGlobalState","ignore","user","storeTest","unmount","unmountComponentAtNode","navigator","serviceWorker","ready","then","registration","unregister","__webpack_public_path__","__INJECTED_PUBLIC_PATH_BY_QIANKUN__"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,kBAAZC,SAA0C,kBAAXC,OACxCA,OAAOD,QAAUD,IACQ,oBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,kBAAZC,QACdA,QAAQ,gBAAkBD,IAE1BD,EAAK,gBAAkBC,IARzB,CASGK,QAAQ,WACX,O,yVCPe,aACb,OACEC,IAAAC,cAAAD,IAAAE,SAAA,KACEF,IAAAC,cAAA,MAAIE,UAAU,aAAY,cAC1BH,IAAAC,cAAA,KAAGE,UAAU,WAAU,kBACLC,UAAa,mBAAiBC,O,iBCLvC,aACb,MAAOC,EAASC,GAAcC,oBAAS,GACvC,OACER,IAAAC,cAAAD,IAAAE,SAAA,KACEF,IAAAC,cAACQ,IAAM,CAACC,QAASA,IAAMH,GAAW,IAAO,YACzCP,IAAAC,cAACU,IAAK,CAACL,QAASA,EAASM,KAAMA,IAAML,GAAW,GAAQM,SAAUA,IAAMN,GAAW,GAAQO,MAAM,WAAU,sECNlG,aACb,OACEd,IAAAC,cAAA,MAAIE,UAAU,eAAeY,MAAO,CAAEC,YAAa,QAAS,SCOhE,MAAMC,EAAQC,eAAK,IAAM,+BAEnBC,EAAeA,IAEjBnB,IAAAC,cAACmB,IAAM,CAACC,SAAUtB,OAAOuB,uBAAyB,WAAa,KAC7DtB,IAAAC,cAAA,WACED,IAAAC,cAACsB,IAAI,CAACC,GAAG,KAAI,QACbxB,IAAAC,cAACwB,IAAO,CAACC,KAAK,aACd1B,IAAAC,cAACsB,IAAI,CAACC,GAAG,UAAS,UAEpBxB,IAAAC,cAAC0B,WAAQ,CAACC,SAAU,MAClB5B,IAAAC,cAAC4B,IAAM,KACL7B,IAAAC,cAAC6B,IAAK,CAACC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjClC,IAAAC,cAAC6B,IAAK,CAACC,KAAK,SAASE,UAAWhB,OAO3B,SAASkB,IACtB,OACEnC,IAAAC,cAAA,OAAKE,UAAU,YACbH,IAAAC,cAACmC,EAAU,MACXpC,IAAAC,cAACoC,EAAU,MAEXrC,IAAAC,cAACwB,IAAO,MAERzB,IAAAC,cAACkB,EAAY,OC3BCmB,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MAAM,2DCXnC,SAASC,EAAOC,GACd,MAAM,UAAEC,GAAcD,EACtBE,IAASH,OAAO1C,IAAAC,cAACkC,EAAG,MAAKS,EAAYA,EAAUE,cAAc,SAAWC,SAASD,cAAc,UAiB1FE,eAAeC,IACpBC,QAAQC,IAAI,mCAGPH,eAAeI,EAAMT,GAC1BO,QAAQC,IAAI,sCAAuCR,GAnBrD,SAAmBA,GACjBA,EAAMU,oBAAoB,CAACC,EAAOC,IAASL,QAAQC,IAAI,0BAADK,OAA2Bb,EAAMc,KAAI,MAAMH,EAAOC,IAAO,GAC/GZ,EAAMe,eAAe,CACnBC,OAAQhB,EAAMc,KACdG,KAAM,CACJH,KAAMd,EAAMc,QAehBI,CAAUlB,GACVD,EAAOC,GAGFK,eAAec,EAAQnB,GAC5B,MAAM,UAAEC,GAAcD,EACtBE,IAASkB,uBAAuBnB,EAAYA,EAAUE,cAAc,SAAWC,SAASD,cAAc,UAhBnG/C,OAAOuB,wBACVoB,EAAO,IDoGH,kBAAmBsB,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,gB,wDE5HftE,OAAOuB,yBAETgD,IAA0BvE,OAAOwE,uC","file":"static/js/main.407f16a3.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react16-main\"] = factory();\n\telse\n\t\troot[\"react16-main\"] = factory();\n})(window, function() {\nreturn ","import React, { version as reactVersion } from 'react';\r\nimport { version as antdVersion } from 'antd';\r\n\r\nexport default function() {\r\n  return (\r\n    <>\r\n      <h1 className=\"app-title\">React Demo</h1>\r\n      <p className=\"app-lib\">\r\n        React version: {reactVersion}, AntD version: {antdVersion}\r\n      </p>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Button, Modal } from 'antd';\r\n\r\nexport default function() {\r\n  const [visible, setVisible] = useState(false);\r\n  return (\r\n    <>\r\n      <Button onClick={() => setVisible(true)}>CLICK ME</Button>\r\n      <Modal visible={visible} onOk={() => setVisible(false)} onCancel={() => setVisible(false)} title=\"qiankun\">\r\n        Probably the most complete micro-frontends solution you ever met\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function() {\r\n  return (\r\n    <h2 className=\"app-nav-item\" style={{ borderColor: 'red' }}>\r\n      Home\r\n    </h2>\r\n  );\r\n}\r\n","import React, { lazy, Suspense } from 'react';\r\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\r\nimport { Divider } from 'antd';\r\n\r\nimport 'antd/dist/antd.min.css';\r\nimport './App.css';\r\n\r\nimport LibVersion from './components/LibVersion';\r\nimport HelloModal from './components/HelloModal';\r\n\r\nimport Home from './pages/Home';\r\nconst About = lazy(() => import('./pages/About'));\r\n\r\nconst RouteExample = () => {\r\n  return (\r\n    <Router basename={window.__POWERED_BY_QIANKUN__ ? '/react16' : '/'}>\r\n      <nav>\r\n        <Link to=\"/\">Home</Link>\r\n        <Divider type=\"vertical\" />\r\n        <Link to=\"/about\">About</Link>\r\n      </nav>\r\n      <Suspense fallback={null}>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/about\" component={About} />\r\n        </Switch>\r\n      </Suspense>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"app-main\">\r\n      <LibVersion />\r\n      <HelloModal />\r\n\r\n      <Divider />\r\n\r\n      <RouteExample />\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import './public-path';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nfunction render(props) {\r\n  const { container } = props;\r\n  ReactDOM.render(<App />, container ? container.querySelector('#root') : document.querySelector('#root'));\r\n}\r\n\r\nfunction storeTest(props) {\r\n  props.onGlobalStateChange((value, prev) => console.log(`[onGlobalStateChange - ${props.name}]:`, value, prev), true);\r\n  props.setGlobalState({\r\n    ignore: props.name,\r\n    user: {\r\n      name: props.name,\r\n    },\r\n  });\r\n}\r\n\r\nif (!window.__POWERED_BY_QIANKUN__) {\r\n  render({});\r\n}\r\n\r\nexport async function bootstrap() {\r\n  console.log('[react16] react app bootstraped');\r\n}\r\n\r\nexport async function mount(props) {\r\n  console.log('[react16] props from main framework', props);\r\n  storeTest(props);\r\n  render(props);\r\n}\r\n\r\nexport async function unmount(props) {\r\n  const { container } = props;\r\n  ReactDOM.unmountComponentAtNode(container ? container.querySelector('#root') : document.querySelector('#root'));\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","if (window.__POWERED_BY_QIANKUN__) {\r\n  // eslint-disable-next-line no-undef\r\n  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\r\n}\r\n"],"sourceRoot":""}